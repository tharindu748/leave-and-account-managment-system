
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  refreshToken: 'refreshToken',
  employeeId: 'employeeId',
  cardNumber: 'cardNumber',
  validFrom: 'validFrom',
  validTo: 'validTo',
  epfNo: 'epfNo',
  nic: 'nic',
  jobPosition: 'jobPosition',
  imagePath: 'imagePath',
  active: 'active',
  joinDate: 'joinDate',
  address: 'address'
};

exports.Prisma.Leave_requestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  approvedBy: 'approvedBy',
  leaveType: 'leaveType',
  status: 'status',
  reason: 'reason',
  requestedAt: 'requestedAt',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt'
};

exports.Prisma.Leave_request_dateScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  leaveDate: 'leaveDate',
  isHalfDay: 'isHalfDay',
  halfdayType: 'halfdayType'
};

exports.Prisma.Leave_balanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  year: 'year',
  leaveType: 'leaveType',
  balance: 'balance'
};

exports.Prisma.Leave_policyScalarFieldEnum = {
  leaveType: 'leaveType',
  defaultBalance: 'defaultBalance'
};

exports.Prisma.SyncHistoryScalarFieldEnum = {
  id: 'id',
  syncTime: 'syncTime',
  totalUsers: 'totalUsers',
  newUsers: 'newUsers',
  updatedUsers: 'updatedUsers',
  status: 'status'
};

exports.Prisma.PunchScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  eventTime: 'eventTime',
  correctEventTime: 'correctEventTime',
  direction: 'direction',
  source: 'source',
  note: 'note',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  directionCorrected: 'directionCorrected',
  originalDirection: 'originalDirection',
  correctedBy: 'correctedBy',
  correctionNote: 'correctionNote',
  correctedAt: 'correctedAt'
};

exports.Prisma.AttendanceDayScalarFieldEnum = {
  employeeId: 'employeeId',
  workDate: 'workDate',
  startTime: 'startTime',
  firstIn: 'firstIn',
  lastOut: 'lastOut',
  workedSeconds: 'workedSeconds',
  notWorkingSeconds: 'notWorkingSeconds',
  overtimeSeconds: 'overtimeSeconds',
  hadManual: 'hadManual',
  status: 'status',
  calculatedAt: 'calculatedAt'
};

exports.Prisma.DeviceConfigScalarFieldEnum = {
  id: 'id',
  ip: 'ip',
  username: 'username',
  passwordEnc: 'passwordEnc',
  lastEventTime: 'lastEventTime',
  authFailedAt: 'authFailedAt',
  authFailureCount: 'authFailureCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceConfigScalarFieldEnum = {
  id: 'id',
  workStart: 'workStart',
  workEnd: 'workEnd',
  otEnd: 'otEnd',
  earlyStart: 'earlyStart',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalaryConfigScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  basicSalary: 'basicSalary',
  otRate: 'otRate',
  allowance: 'allowance',
  deduction: 'deduction',
  effectiveFrom: 'effectiveFrom'
};

exports.Prisma.SalaryRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  month: 'month',
  year: 'year',
  basicSalary: 'basicSalary',
  totalLeave: 'totalLeave',
  leaveDeductions: 'leaveDeductions',
  overtimePay: 'overtimePay',
  netSalary: 'netSalary',
  generatedAt: 'generatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.LeaveType = exports.$Enums.LeaveType = {
  ANNUAL: 'ANNUAL',
  CASUAL: 'CASUAL'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.HalfdayType = exports.$Enums.HalfdayType = {
  MORNING: 'MORNING',
  AFTERNOON: 'AFTERNOON'
};

exports.Direction = exports.$Enums.Direction = {
  IN: 'IN',
  OUT: 'OUT'
};

exports.Source = exports.$Enums.Source = {
  device: 'device',
  manual: 'manual'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  OK: 'OK',
  ABSENT: 'ABSENT',
  PARTIAL: 'PARTIAL',
  MANUAL: 'MANUAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Leave_request: 'Leave_request',
  Leave_request_date: 'Leave_request_date',
  Leave_balance: 'Leave_balance',
  Leave_policy: 'Leave_policy',
  SyncHistory: 'SyncHistory',
  Punch: 'Punch',
  AttendanceDay: 'AttendanceDay',
  DeviceConfig: 'DeviceConfig',
  AttendanceConfig: 'AttendanceConfig',
  SalaryConfig: 'SalaryConfig',
  SalaryRecord: 'SalaryRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
