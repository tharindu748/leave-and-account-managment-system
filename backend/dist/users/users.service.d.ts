import { DatabaseService } from '../database/database.service';
import { CreateRegUserDto, UpdateRegUserDto } from './dto/users.dto';
export declare class UsersService {
    private readonly db;
    constructor(db: DatabaseService);
    listUsers(): Promise<{
        employeeId: string | null;
        name: string;
        epfNo: string | null;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        createdAt: Date;
        active: boolean;
    }[]>;
    findUserById(id: number): Promise<{
        employeeId: string | null;
        name: string;
        epfNo: string | null;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        isAdmin: boolean;
        createdAt: Date;
        updatedAt: Date;
        refreshToken: string | null;
        active: boolean;
    }>;
    findUserByEmail(email: string): Promise<{
        employeeId: string | null;
        name: string;
        epfNo: string | null;
        password: string;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        isAdmin: boolean;
        refreshToken: string | null;
        active: boolean;
    } | null>;
    create(createUserDto: any): Promise<{
        employeeId: string | null;
        name: string;
        cardNumber: string | null;
        validFrom: Date | null;
        validTo: Date | null;
        epfNo: string | null;
        password: string;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        isAdmin: boolean;
        createdAt: Date;
        updatedAt: Date;
        refreshToken: string | null;
        active: boolean;
    }>;
    update(id: number, updateData: any): Promise<{
        employeeId: string | null;
        name: string;
        cardNumber: string | null;
        validFrom: Date | null;
        validTo: Date | null;
        epfNo: string | null;
        password: string;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        isAdmin: boolean;
        createdAt: Date;
        updatedAt: Date;
        refreshToken: string | null;
        active: boolean;
    }>;
    updateRegUserById(id: number, updateData: UpdateRegUserDto): Promise<{
        employeeId: string | null;
        name: string;
        epfNo: string | null;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        active: boolean;
    }>;
    private cleanUpdateData;
    upsertRegUser(dto: CreateRegUserDto): Promise<{
        employeeId: string | null;
        name: string;
        cardNumber: string | null;
        validFrom: Date | null;
        validTo: Date | null;
        epfNo: string | null;
        password: string;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        isAdmin: boolean;
        createdAt: Date;
        updatedAt: Date;
        refreshToken: string | null;
        active: boolean;
    }>;
    findUserByEmployeeId(employeeId: string): Promise<{
        employeeId: string | null;
        name: string;
        epfNo: string | null;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        active: boolean;
    } | null>;
    updateRegUserFields(employeeId: string, updateData: UpdateRegUserDto): Promise<{
        employeeId: string | null;
        name: string;
        epfNo: string | null;
        nic: string | null;
        jobPosition: string | null;
        joinDate: Date | null;
        address: string | null;
        email: string;
        imagePath: string | null;
        id: number;
        active: boolean;
    }>;
}
